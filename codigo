-- ========================================
-- Projeto SQL - E-commerce (Portfólio)
-- ========================================

-- Criar o banco de dados
DROP DATABASE IF EXISTS ecommerce;
CREATE DATABASE ecommerce;
USE ecommerce;

-- ===============================
-- Tabelas
-- ===============================

CREATE TABLE clientes (
    id_cliente INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100),
    email VARCHAR(100),
    cidade VARCHAR(50),
    data_cadastro DATE
);

CREATE TABLE produtos (
    id_produto INT AUTO_INCREMENT PRIMARY KEY,
    nome_produto VARCHAR(100),
    categoria VARCHAR(50),
    preco DECIMAL(10,2)
);

CREATE TABLE pedidos (
    id_pedido INT AUTO_INCREMENT PRIMARY KEY,
    id_cliente INT,
    data_pedido DATE,
    valor_total DECIMAL(10,2),
    FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente)
);

CREATE TABLE itens_pedido (
    id_item INT AUTO_INCREMENT PRIMARY KEY,
    id_pedido INT,
    id_produto INT,
    quantidade INT,
    preco_unitario DECIMAL(10,2),
    FOREIGN KEY (id_pedido) REFERENCES pedidos(id_pedido),
    FOREIGN KEY (id_produto) REFERENCES produtos(id_produto)
);

-- ===============================
-- Inserts de Exemplo
-- ===============================

-- Clientes
INSERT INTO clientes (nome, email, cidade, data_cadastro) VALUES
('Ana Souza', 'ana.souza@email.com', 'São Paulo', '2024-01-10'),
('Carlos Lima', 'carlos.lima@email.com', 'Rio de Janeiro', '2024-02-15'),
('Mariana Costa', 'mariana.costa@email.com', 'Belo Horizonte', '2024-03-05'),
('João Oliveira', 'joao.oliveira@email.com', 'Curitiba', '2024-04-20'),
('Fernanda Silva', 'fernanda.silva@email.com', 'Porto Alegre', '2024-05-12');

-- Produtos
INSERT INTO produtos (nome_produto, categoria, preco) VALUES
('Notebook Dell', 'Eletrônicos', 3500.00),
('Smartphone Samsung', 'Eletrônicos', 2500.00),
('Headset HyperX', 'Acessórios', 600.00),
('Cadeira Gamer', 'Móveis', 1200.00),
('Monitor LG 24"', 'Eletrônicos', 900.00),
('Teclado Mecânico', 'Acessórios', 450.00);

-- Pedidos
INSERT INTO pedidos (id_cliente, data_pedido, valor_total) VALUES
(1, '2024-04-15', 4100.00),
(2, '2024-04-17', 3700.00),
(3, '2024-05-02', 2500.00),
(1, '2024-05-10', 1200.00),
(4, '2024-06-05', 900.00),
(5, '2024-06-20', 3950.00);

-- Itens dos pedidos
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade, preco_unitario) VALUES
(1, 1, 1, 3500.00),  -- Ana comprou um Notebook Dell
(1, 3, 1, 600.00),   -- Ana comprou um Headset
(2, 2, 1, 2500.00),  -- Carlos comprou um Smartphone
(2, 6, 2, 600.00),   -- Carlos comprou 2 Teclados Mecânicos
(3, 2, 1, 2500.00),  -- Mariana comprou um Smartphone
(4, 4, 1, 1200.00),  -- Ana comprou uma Cadeira Gamer
(5, 5, 1, 900.00),   -- João comprou um Monitor LG
(6, 1, 1, 3500.00),  -- Fernanda comprou um Notebook Dell
(6, 3, 1, 450.00);   -- Fernanda comprou um Headset

-- ========================================
-- Consultas Inteligentes (Filtros SQL)
-- Projeto: E-commerce
-- ========================================
USE ecommerce;

-- 1. Top 5 clientes que mais gastaram no e-commerce
SELECT c.nome, c.email, SUM(p.valor_total) AS total_gasto
FROM clientes c
JOIN pedidos p ON c.id_cliente = p.id_cliente
GROUP BY c.id_cliente
ORDER BY total_gasto DESC
LIMIT 5;

-- 2. Produtos mais vendidos (em quantidade)
SELECT pr.nome_produto, SUM(i.quantidade) AS total_vendido
FROM itens_pedido i
JOIN produtos pr ON i.id_produto = pr.id_produto
GROUP BY pr.id_produto
ORDER BY total_vendido DESC
LIMIT 5;

-- 3. Receita mensal do e-commerce
SELECT DATE_FORMAT(data_pedido, '%Y-%m') AS mes, 
       SUM(valor_total) AS receita
FROM pedidos
GROUP BY mes
ORDER BY mes;

-- 4. Ticket médio (valor médio por pedido)
SELECT AVG(valor_total) AS ticket_medio
FROM pedidos;

-- 5. Clientes que compraram mais de 1 vez
SELECT c.nome, COUNT(p.id_pedido) AS qtd_pedidos
FROM clientes c
JOIN pedidos p ON c.id_cliente = p.id_cliente
GROUP BY c.id_cliente
HAVING qtd_pedidos > 1;

-- 6. Produtos que nunca foram vendidos
SELECT pr.nome_produto
FROM produtos pr
LEFT JOIN itens_pedido i ON pr.id_produto = i.id_produto
WHERE i.id_produto IS NULL;

-- 7. Cidade com mais clientes cadastrados
SELECT cidade, COUNT(*) AS qtd_clientes
FROM clientes
GROUP BY cidade
ORDER BY qtd_clientes DESC
LIMIT 1;

-- 8. Distribuição de pedidos por cidade
SELECT c.cidade, COUNT(p.id_pedido) AS total_pedidos
FROM clientes c
JOIN pedidos p ON c.id_cliente = p.id_cliente
GROUP BY c.cidade
ORDER BY total_pedidos DESC;

-- 9. Produto mais caro e mais barato
SELECT nome_produto, preco
FROM produtos
WHERE preco = (SELECT MAX(preco) FROM produtos)
   OR preco = (SELECT MIN(preco) FROM produtos);

-- 10. Clientes que gastaram acima da média
SELECT c.nome, SUM(p.valor_total) AS total_gasto
FROM clientes c
JOIN pedidos p ON c.id_cliente = p.id_cliente
GROUP BY c.id_cliente
HAVING total_gasto > (SELECT AVG(valor_total) FROM pedidos);
